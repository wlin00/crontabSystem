{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/src/component/pages/frontend/Notice/Log/Log.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Typography, Input, Table, Tag, message } from 'antd';\nimport CronContext from '../../../../../context/crontab/cronContext';\nimport axios from 'axios';\nimport moment from 'moment';\nimport '../Log/Log.scss';\n\nconst Log = props => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        total = _useState2[0],\n        setTotal = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        logData = _useState4[0],\n        setLogData = _useState4[1];\n\n  const cronContext = useContext(CronContext);\n  const node = cronContext.node,\n        getNode = cronContext.getNode;\n  const logName = props.logName; //获取父组件传参\n\n  useEffect(() => {\n    //useEffect 重构生命周期didMount\n    getLog();\n    let task = node[logName].name;\n    console.log('log_name', task); // eslint-disable-next-line\n  }, []); //获取日志列表\n\n  const getLog = () => {\n    //由于axios源码内部转换post请求参数为JSON.Stringify\n    //所以这里使用URLSearchParams键值对传参\n    let param = new URLSearchParams();\n    let task = node[logName].name;\n    param.append('name', task);\n    axios.post('/job/log', param).then(data => {\n      if (data.status === 200) {\n        if (data.data.errno !== 0) {\n          message.info('查看任务日志失败');\n          return;\n        }\n\n        if (data.data.data.length === 0) {\n          setLogData({});\n        }\n\n        if (data.data.data.length > 0) {\n          setLogData(data.data.data);\n          setTotal(data.data.data.length);\n        }\n\n        console.log(data.data.data);\n      }\n    }).catch(err => {\n      message.info(err);\n    });\n  }; //分页\n\n\n  const _useState5 = useState(1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentPage = _useState6[0],\n        setCurrentPage = _useState6[1];\n\n  const paginationProps = {\n    showSizeChanger: false,\n    showQuickJumper: false,\n    showTotal: () => \"\\u5171\".concat(total, \"\\u6761\"),\n    pageSize: 5,\n    current: currentPage,\n    total: total,\n    onShowSizeChange: (current, pageSize) => changePageSize(pageSize, current),\n    onChange: current => changePage(current)\n  };\n\n  const changePageSize = (a, b) => {\n    console.log(a, b);\n  };\n\n  const changePage = v => {\n    console.log(v);\n    setCurrentPage(v);\n  }; // const paginationProps = {\n  //     showSizeChanger: true,\n  //     showQuickJumper: false,\n  //     showTotal: () => `共${totals}条`,\n  //     pageSize: this.state.pageSize,\n  //     current: page.pageNum,\n  //     total: page.total,\n  //     onShowSizeChange: (current, pageSize) => this.changePageSize(pageSize, current),\n  //     onChange: (current) => this.changePage(current),\n  // }\n\n\n  const columns = [{\n    title: '任务名',\n    dataIndex: 'name',\n    key: 'name',\n    render: text => React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, text)\n  }, {\n    title: 'shell命令',\n    dataIndex: 'shell',\n    key: 'shell',\n    render: text => React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, text)\n  }, {\n    title: '错误原因',\n    dataIndex: 'false',\n    key: 'false'\n  }, {\n    title: '脚本输出',\n    dataIndex: 'output',\n    key: 'output'\n  }, {\n    title: '计划开始时间',\n    dataIndex: 'planTime',\n    key: 'planTime'\n  }, {\n    title: '实际调度时间',\n    dataIndex: 'realTime',\n    key: 'realTime'\n  }, {\n    title: '开始执行时间',\n    dataIndex: 'begin',\n    key: 'begin'\n  }, {\n    title: '执行结束时间',\n    dataIndex: 'end',\n    key: 'end'\n  }];\n  const data = []; // 初始化antd表格\n\n  if (logData.length !== undefined) {\n    logData.forEach((item, index) => {\n      data.push({\n        key: String(index + 1),\n        name: item.jobName ? item.jobName : '暂无',\n        shell: item.command ? item.command : '暂无',\n        false: item.err ? item.err : '暂无',\n        output: item.output ? item.output : '暂无',\n        planTime: item.planTime ? moment(item.planTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无',\n        realTime: item.scheduleTime ? moment(item.scheduleTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无',\n        begin: item.startTime ? moment(item.startTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无',\n        end: item.endTime ? moment(item.endTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无'\n      });\n    });\n  } // if (loading) { return (<Spinner style={{ width: '300px' }}></Spinner>) }\n\n\n  return React.createElement(\"div\", {\n    className: \"Table3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Table3-table\",\n    style: {\n      marginBottom: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    pagination: paginationProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  })));\n};\n\nexport default Log;","map":{"version":3,"sources":["/Users/mac/Desktop/毕设/毕设/src/component/pages/frontend/Notice/Log/Log.js"],"names":["React","useState","useContext","useEffect","Typography","Input","Table","Tag","message","CronContext","axios","moment","Log","props","total","setTotal","logData","setLogData","cronContext","node","getNode","logName","getLog","task","name","console","log","param","URLSearchParams","append","post","then","data","status","errno","info","length","catch","err","currentPage","setCurrentPage","paginationProps","showSizeChanger","showQuickJumper","showTotal","pageSize","current","onShowSizeChange","changePageSize","onChange","changePage","a","b","v","columns","title","dataIndex","key","render","text","undefined","forEach","item","index","push","String","jobName","shell","command","false","output","planTime","format","realTime","scheduleTime","begin","startTime","end","endTime","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { Typography, Input, Table, Tag, message } from 'antd'\nimport CronContext from '../../../../../context/crontab/cronContext'\nimport axios from 'axios'\nimport moment from 'moment'\n\nimport '../Log/Log.scss'\n\n\n\nconst Log = (props) => {\n    const [total,setTotal]=useState(0)\n    const [logData, setLogData] = useState({})\n    const cronContext = useContext(CronContext)\n    const { node, getNode, } = cronContext\n\n\n\n    const { logName } = props //获取父组件传参\n\n\n    useEffect(() => {  //useEffect 重构生命周期didMount\n        getLog()\n\n        let task = node[logName].name\n\n        console.log('log_name', task)\n        // eslint-disable-next-line\n    }, [])\n\n\n    //获取日志列表\n    const getLog = () => {\n        //由于axios源码内部转换post请求参数为JSON.Stringify\n        //所以这里使用URLSearchParams键值对传参\n        let param = new URLSearchParams()\n        let task = node[logName].name\n        param.append('name', task)\n\n        axios.post('/job/log', param)\n            .then((data) => {\n                if (data.status === 200) {\n                    if (data.data.errno !== 0) {\n                        message.info('查看任务日志失败');\n                        return\n                    }\n                    if(data.data.data.length===0){\n                        setLogData({})\n                    }\n                    if (data.data.data.length > 0) {\n                        setLogData(data.data.data)\n                        setTotal(data.data.data.length)\n                    }\n                    console.log(data.data.data)\n\n                }\n            })\n            .catch((err) => { message.info(err) })\n    }\n\n\n    //分页\n    const [currentPage, setCurrentPage] = useState(1)\n    const paginationProps = {\n        showSizeChanger: false,\n        showQuickJumper: false,\n        showTotal: () => `共${total}条`,\n        pageSize: 5,\n        current: currentPage,\n        total: total,\n        onShowSizeChange: (current, pageSize) => changePageSize(pageSize, current),\n        onChange: (current) => changePage(current),\n    }\n\n    const changePageSize = (a, b) => {\n        console.log(a, b)\n    }\n\n    const changePage = (v) => {\n        console.log(v)\n        setCurrentPage(v)\n    }\n\n    // const paginationProps = {\n    //     showSizeChanger: true,\n    //     showQuickJumper: false,\n    //     showTotal: () => `共${totals}条`,\n    //     pageSize: this.state.pageSize,\n    //     current: page.pageNum,\n    //     total: page.total,\n    //     onShowSizeChange: (current, pageSize) => this.changePageSize(pageSize, current),\n    //     onChange: (current) => this.changePage(current),\n    // }\n\n\n\n\n\n\n    const columns = [\n        {\n            title: '任务名',\n            dataIndex: 'name',\n            key: 'name',\n            render: text => <span>{text}</span>,\n        },\n        {\n            title: 'shell命令',\n            dataIndex: 'shell',\n            key: 'shell',\n            render: text => <span>{text}</span>,\n        },\n        {\n            title: '错误原因',\n            dataIndex: 'false',\n            key: 'false',\n        },\n        {\n            title: '脚本输出',\n            dataIndex: 'output',\n            key: 'output',\n        },\n        {\n            title: '计划开始时间',\n            dataIndex: 'planTime',\n            key: 'planTime',\n        },\n        {\n            title: '实际调度时间',\n            dataIndex: 'realTime',\n            key: 'realTime',\n        },\n        {\n            title: '开始执行时间',\n            dataIndex: 'begin',\n            key: 'begin',\n        },\n        {\n            title: '执行结束时间',\n            dataIndex: 'end',\n            key: 'end',\n        },\n\n    ];\n\n    const data = []; // 初始化antd表格\n    if (logData.length !== undefined) {\n        logData.forEach((item, index) => {\n            data.push({\n                key: String(index + 1),\n\n                name: item.jobName ? item.jobName : '暂无',\n                shell: item.command ? item.command : '暂无',\n                false: item.err ? item.err : '暂无',\n                output: item.output ? item.output : '暂无',\n                planTime: item.planTime ? moment(item.planTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无',\n                realTime: item.scheduleTime ? moment(item.scheduleTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无',\n                begin: item.startTime ? moment(item.startTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无',\n                end: item.endTime ? moment(item.endTime).format('YYYY-MM-DD HH:mm:ss.SSS') : '暂无',\n\n\n            })\n\n        })\n    }\n\n    // if (loading) { return (<Spinner style={{ width: '300px' }}></Spinner>) }\n    return (\n        <div className='Table3'>\n            <div className='Table3-table' style={{ marginBottom: '10px' }}>\n                <Table columns={columns} dataSource={data} pagination={paginationProps} />\n            </div>\n        </div>\n    )\n}\n\nexport default Log\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}