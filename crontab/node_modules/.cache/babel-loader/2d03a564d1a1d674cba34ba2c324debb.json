{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/src/context/monitor/monitorState.js\";\nimport React, { useReducer } from 'react';\nimport MonitorContext from './monitorContext';\nimport MonitorReducer from './monitorReducer';\nimport axios from 'axios';\nimport { message } from 'antd';\nimport { GET_MONITOR, SET_LOADING } from '../type';\n\nconst CronState = props => {\n  //初始化状态\n  const initialState = {\n    monitor: {},\n    loading: false,\n    total: 0\n  }; //使用useReducer，即state关联Reducer\n\n  const _useReducer = useReducer(MonitorReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //函数参数1：当前提交的reduver       函数参数2：当前提交的状态值 ；\n  //实现方法区域                                                          \n  //getLoginUser\n\n\n  const getMonitor = async _id => {\n    //根据login名获取user信息\n    setLoading(true); //只要开始请求数据，更改为loading状态\n\n    const res = await axios.get('/monitor/api/hosts/status', {});\n\n    if (res.status !== 200) {\n      message.info('网络错误');\n      setLoading(false);\n      return;\n    } // if(res.data.errno!==0){\n    //     message.info('请求失败')\n    //     setLoading(false)\n    //     return\n    // }\n\n\n    dispatch({\n      type: GET_MONITOR,\n      payload: {\n        monitor: res,\n        total: res.length\n      }\n    });\n    setLoading(false);\n  }; //set loading\n\n\n  const setLoading = loading => {\n    dispatch({\n      type: SET_LOADING,\n      //使用dispatch提交到Reducer中\n      payload: {\n        loading\n      }\n    });\n  };\n\n  return React.createElement(MonitorContext.Provider, {\n    value: {\n      monitor: state.monitor,\n      loading: state.loading,\n      total: state.total,\n      setLoading,\n      getMonitor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MonitorState;","map":{"version":3,"sources":["/Users/mac/Desktop/毕设/毕设/src/context/monitor/monitorState.js"],"names":["React","useReducer","MonitorContext","MonitorReducer","axios","message","GET_MONITOR","SET_LOADING","CronState","props","initialState","monitor","loading","total","state","dispatch","getMonitor","_id","setLoading","res","get","status","info","type","payload","length","children","MonitorState"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,SAAzC;;AAIA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACvB;AACA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,OAAO,EAAE,EADQ;AAEjBC,IAAAA,OAAO,EAAE,KAFQ;AAGjBC,IAAAA,KAAK,EAAC;AAHW,GAArB,CAFuB,CASvB;;AATuB,sBAUGZ,UAAU,CAACE,cAAD,EAAiBO,YAAjB,CAVb;AAAA;AAAA,QAUhBI,KAVgB;AAAA,QAUTC,QAVS,oBAU4C;AAEnE;AACA;;;AACA,QAAMC,UAAU,GAAG,MAAMC,GAAN,IAAa;AAAE;AAC9BC,IAAAA,UAAU,CAAC,IAAD,CAAV,CAD4B,CACZ;;AAEhB,UAAMC,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,2BAAV,EAAsC,EAAtC,CAAlB;;AACA,QAAGD,GAAG,CAACE,MAAJ,KAAa,GAAhB,EAAoB;AAChBhB,MAAAA,OAAO,CAACiB,IAAR,CAAa,MAAb;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH,KAR2B,CAS5B;AACA;AACA;AACA;AACA;;;AACAH,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEjB,WADD;AAELkB,MAAAA,OAAO,EAAE;AACLb,QAAAA,OAAO,EAAEQ,GADJ;AAELN,QAAAA,KAAK,EAACM,GAAG,CAACM;AAFL;AAFJ,KAAD,CAAR;AAQAP,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAvBD,CAduB,CAwCvB;;;AACA,QAAMA,UAAU,GAAIN,OAAD,IAAa;AAC5BG,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEhB,WADD;AACc;AACnBiB,MAAAA,OAAO,EAAE;AAAEZ,QAAAA;AAAF;AAFJ,KAAD,CAAR;AAIH,GALD;;AAOA,SAAQ,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AACpCD,MAAAA,OAAO,EAAEG,KAAK,CAACH,OADqB;AAEpCC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAFqB;AAGpCC,MAAAA,KAAK,EAACC,KAAK,CAACD,KAHwB;AAKpCK,MAAAA,UALoC;AAMpCF,MAAAA;AANoC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOJP,KAAK,CAACiB,QAPF,CAAR;AAUH,CA1DD;;AA2DA,eAAeC,YAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport MonitorContext from './monitorContext';\nimport MonitorReducer from './monitorReducer';\nimport axios from 'axios'\nimport {message} from 'antd'\n\nimport { GET_MONITOR, SET_LOADING } from '../type'\n\n\n\nconst CronState = props => {\n    //初始化状态\n    const initialState = {\n        monitor: {},\n        loading: false,\n        total:0\n\n    };\n\n    //使用useReducer，即state关联Reducer\n    const [state, dispatch] = useReducer(MonitorReducer, initialState) //函数参数1：当前提交的reduver       函数参数2：当前提交的状态值 ；\n\n    //实现方法区域                                                          \n    //getLoginUser\n    const getMonitor = async _id => { //根据login名获取user信息\n        setLoading(true)//只要开始请求数据，更改为loading状态\n        \n        const res = await axios.get('/monitor/api/hosts/status',{})\n        if(res.status!==200){\n            message.info('网络错误')\n            setLoading(false)\n            return\n        }\n        // if(res.data.errno!==0){\n        //     message.info('请求失败')\n        //     setLoading(false)\n        //     return\n        // }\n        dispatch({\n            type: GET_MONITOR,\n            payload: {\n                monitor: res,\n                total:res.length\n            }\n        })\n\n        setLoading(false)\n    };\n\n   \n    //set loading\n    const setLoading = (loading) => {\n        dispatch({\n            type: SET_LOADING, //使用dispatch提交到Reducer中\n            payload: { loading }\n        })\n    }\n\n    return (<MonitorContext.Provider value={{\n        monitor: state.monitor,\n        loading: state.loading,\n        total:state.total,\n\n        setLoading,\n        getMonitor,\n    }}>{props.children}</MonitorContext.Provider>)\n\n\n}\nexport default MonitorState\n"]},"metadata":{},"sourceType":"module"}