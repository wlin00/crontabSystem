{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/src/context/alert/alertState.js\";\n//App.js中的方法存储区域 ， 提交当前状态到reducer\nimport React, { useReducer } from 'react';\nimport AlertContext from \"./alertContext\";\nimport AlertReducer from \"./alertReducer\";\nimport { SET_ALERT, ClEAR_ALERT } from \"../type\";\n\nconst AlertState = props => {\n  const initialState = {\n    alert: null\n  }; //设置state的初始值\n  //使用useReducer，做到状态的提交，并且可从reducer中获取最新状态\n\n  const _useReducer = useReducer(AlertReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //参数1：所提交到的reducer  参数2：要提交的状态值，可以为一个对象\n  //实现方法\n\n\n  const setAlert = (msg, type) => {\n    // setalert({msg,type}) //接收自组件的警告传值,将一个值转为对象存放在alert中\n    // setTimeout(()=>{\n    //   setalert(null) //定时器：2s后删除提示框显示所依赖的字段\n    // },2000)\n    //用dispatch替代useState的状态设置方法\n    dispatch({\n      type: SET_ALERT,\n      //类型用于reducer中的匹配\n      payload: {\n        msg,\n        type\n      }\n    });\n    setTimeout(() => {\n      dispatch({\n        type: ClEAR_ALERT\n      });\n    }, 3000);\n  }; //返回视图 加上提供器Provider，可以让该视图包裹app.JS 全局挂载alert、setAlert\n\n\n  return React.createElement(AlertContext.Provider, {\n    value: {\n      alert: state.alert,\n      setAlert\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AlertState;","map":{"version":3,"sources":["/Users/mac/Desktop/毕设/毕设/src/context/alert/alertState.js"],"names":["React","useReducer","AlertContext","AlertReducer","SET_ALERT","ClEAR_ALERT","AlertState","props","initialState","alert","state","dispatch","setAlert","msg","type","payload","setTimeout","children"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,SAAT,EAAmBC,WAAnB,QAAsC,SAAtC;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAExB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAC;AADW,GAArB,CAFwB,CAIrB;AAEH;;AANwB,sBAOCR,UAAU,CAACE,YAAD,EAAcK,YAAd,CAPX;AAAA;AAAA,QAOjBE,KAPiB;AAAA,QAOXC,QAPW,oBAOwC;AAEhE;;;AACA,QAAMC,QAAQ,GAAC,CAACC,GAAD,EAAKC,IAAL,KAAY;AACvB;AACA;AACA;AACA;AAEA;AACAH,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACV,SADA;AACa;AAClBW,MAAAA,OAAO,EAAC;AAACF,QAAAA,GAAD;AAAKC,QAAAA;AAAL;AAFH,KAAD,CAAR;AAKAE,IAAAA,UAAU,CAAC,MAAI;AACXL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAACT;AADA,OAAD,CAAR;AAGH,KAJS,EAIR,IAJQ,CAAV;AAMD,GAlBH,CAVwB,CA+BtB;;;AACA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACI,MAAAA,KAAK,EAACC,KAAK,CAACD,KAAb;AAAmBG,MAAAA;AAAnB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,KAAK,CAACU,QADX,CADF;AAML,CAtCD;;AAwCA,eAAeX,UAAf","sourcesContent":["//App.js中的方法存储区域 ， 提交当前状态到reducer\n\nimport React ,{useReducer} from 'react';\nimport AlertContext from \"./alertContext\";\nimport AlertReducer from \"./alertReducer\";\nimport { SET_ALERT,ClEAR_ALERT } from \"../type\";\n\nconst AlertState = props => {\n\n    const initialState = {\n        alert:null\n    }; //设置state的初始值\n\n    //使用useReducer，做到状态的提交，并且可从reducer中获取最新状态\n    const [state,dispatch] = useReducer(AlertReducer,initialState)  //参数1：所提交到的reducer  参数2：要提交的状态值，可以为一个对象\n\n    //实现方法\n    const setAlert=(msg,type)=>{\n        // setalert({msg,type}) //接收自组件的警告传值,将一个值转为对象存放在alert中\n        // setTimeout(()=>{\n        //   setalert(null) //定时器：2s后删除提示框显示所依赖的字段\n        // },2000)\n\n        //用dispatch替代useState的状态设置方法\n        dispatch({\n            type:SET_ALERT,   //类型用于reducer中的匹配\n            payload:{msg,type}   \n        })\n\n        setTimeout(()=>{\n            dispatch({\n                type:ClEAR_ALERT,\n            })\n        },3000)\n\n      };\n\n      \n      //返回视图 加上提供器Provider，可以让该视图包裹app.JS 全局挂载alert、setAlert\n      return(\n        <AlertContext.Provider value={{alert:state.alert,setAlert}}>\n            {props.children}\n        </AlertContext.Provider>   \n        )\n\n}\n\nexport default AlertState"]},"metadata":{},"sourceType":"module"}