{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nfunction toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return '';\n}\n\nexports.toTitle = toTitle;\n\nfunction getValuePropValue(child) {\n  if (!child) {\n    return null;\n  }\n\n  var props = child.props;\n\n  if ('value' in props) {\n    return props.value;\n  }\n\n  if (child.key) {\n    return child.key;\n  }\n\n  if (child.type && child.type.isSelectOptGroup && props.label) {\n    return props.label;\n  }\n\n  throw new Error(\"Need at least a key or a value or a label (only for OptGroup) for \".concat(child));\n}\n\nexports.getValuePropValue = getValuePropValue;\n\nfunction getPropValue(child, prop) {\n  if (prop === 'value') {\n    return getValuePropValue(child);\n  }\n\n  return child.props[prop];\n}\n\nexports.getPropValue = getPropValue;\n\nfunction isMultiple(props) {\n  return props.multiple;\n}\n\nexports.isMultiple = isMultiple;\n\nfunction isCombobox(props) {\n  return props.combobox;\n}\n\nexports.isCombobox = isCombobox;\n\nfunction isMultipleOrTags(props) {\n  return props.multiple || props.tags;\n}\n\nexports.isMultipleOrTags = isMultipleOrTags;\n\nfunction isMultipleOrTagsOrCombobox(props) {\n  return isMultipleOrTags(props) || isCombobox(props);\n}\n\nexports.isMultipleOrTagsOrCombobox = isMultipleOrTagsOrCombobox;\n\nfunction isSingleMode(props) {\n  return !isMultipleOrTagsOrCombobox(props);\n}\n\nexports.isSingleMode = isSingleMode;\n\nfunction toArray(value) {\n  var ret = value;\n\n  if (value === undefined) {\n    ret = [];\n  } else if (!Array.isArray(value)) {\n    ret = [value];\n  }\n\n  return ret;\n}\n\nexports.toArray = toArray;\n\nfunction getMapKey(value) {\n  return \"\".concat(typeof value, \"-\").concat(value);\n}\n\nexports.getMapKey = getMapKey;\n\nfunction preventDefaultEvent(e) {\n  e.preventDefault();\n}\n\nexports.preventDefaultEvent = preventDefaultEvent;\n\nfunction findIndexInValueBySingleValue(value, singleValue) {\n  var index = -1;\n\n  if (value) {\n    for (var i = 0; i < value.length; i++) {\n      if (value[i] === singleValue) {\n        index = i;\n        break;\n      }\n    }\n  }\n\n  return index;\n}\n\nexports.findIndexInValueBySingleValue = findIndexInValueBySingleValue;\n\nfunction getLabelFromPropsValue(value, key) {\n  var label;\n  value = toArray(value);\n\n  if (value) {\n    // tslint:disable-next-line:prefer-for-of\n    for (var i = 0; i < value.length; i++) {\n      if (value[i].key === key) {\n        label = value[i].label;\n        break;\n      }\n    }\n  }\n\n  return label;\n}\n\nexports.getLabelFromPropsValue = getLabelFromPropsValue;\n\nfunction getSelectKeys(menuItems, value) {\n  if (value === null || value === undefined) {\n    return [];\n  }\n\n  var selectedKeys = [];\n  react_1[\"default\"].Children.forEach(menuItems, function (item) {\n    var type = item.type;\n\n    if (type.isMenuItemGroup) {\n      selectedKeys = selectedKeys.concat(getSelectKeys(item.props.children, value));\n    } else {\n      var itemValue = getValuePropValue(item);\n      var itemKey = item.key;\n\n      if (findIndexInValueBySingleValue(value, itemValue) !== -1 && itemKey) {\n        selectedKeys.push(itemKey);\n      }\n    }\n  });\n  return selectedKeys;\n}\n\nexports.getSelectKeys = getSelectKeys;\nexports.UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexports.UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'on'\n};\n\nfunction findFirstMenuItem(children) {\n  // tslint:disable-next-line:prefer-for-of\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n\n    if (child.type.isMenuItemGroup) {\n      var found = findFirstMenuItem(child.props.children);\n\n      if (found) {\n        return found;\n      }\n    } else if (!child.props.disabled) {\n      return child;\n    }\n  }\n\n  return null;\n}\n\nexports.findFirstMenuItem = findFirstMenuItem;\n\nfunction includesSeparators(str, separators) {\n  // tslint:disable-next-line:prefer-for-of\n  for (var i = 0; i < separators.length; ++i) {\n    if (str.lastIndexOf(separators[i]) > 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.includesSeparators = includesSeparators;\n\nfunction splitBySeparators(str, separators) {\n  var reg = new RegExp(\"[\".concat(separators.join(), \"]\"));\n  return str.split(reg).filter(function (token) {\n    return token;\n  });\n}\n\nexports.splitBySeparators = splitBySeparators;\n\nfunction defaultFilterFn(input, child) {\n  if (child.props.disabled) {\n    return false;\n  }\n\n  var value = toArray(getPropValue(child, this.props.optionFilterProp)).join('');\n  return value.toLowerCase().indexOf(input.toLowerCase()) > -1;\n}\n\nexports.defaultFilterFn = defaultFilterFn;\n\nfunction validateOptionValue(value, props) {\n  if (isSingleMode(props) || isMultiple(props)) {\n    return;\n  }\n\n  if (typeof value !== 'string') {\n    throw new Error(\"Invalid `value` of type `\".concat(typeof value, \"` supplied to Option, \") + \"expected `string` when `tags/combobox` is `true`.\");\n  }\n}\n\nexports.validateOptionValue = validateOptionValue;\n\nfunction saveRef(instance, name) {\n  return function (node) {\n    instance[name] = node;\n  };\n}\n\nexports.saveRef = saveRef;\n\nfunction generateUUID() {\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-uuid';\n  }\n\n  var d = new Date().getTime();\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    // tslint:disable-next-line:no-bitwise\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16); // tslint:disable-next-line:no-bitwise\n\n    return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nexports.generateUUID = generateUUID;","map":null,"metadata":{},"sourceType":"script"}