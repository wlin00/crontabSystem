{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/src/context/monitor/monitorState.js\";\nimport React, { useReducer } from 'react';\nimport MonitorContext from './monitorContext';\nimport MonitorReducer from './monitorReducer';\nimport axios from 'axios';\nimport { message } from 'antd';\nimport { GET_MONITOR, SET_LOADING, GET_DETAIL } from '../type';\n\nconst MonitorState = props => {\n  //初始化状态\n  const initialState = {\n    monitor: {},\n    detail: {},\n    loading: false,\n    total: 0\n  }; //使用useReducer，即state关联Reducer\n\n  const _useReducer = useReducer(MonitorReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //函数参数1：当前提交的reduver       函数参数2：当前提交的状态值 ；\n  //实现方法区域                                                          \n  //getMonitor\n\n\n  const getMonitor = async () => {\n    //根据login名获取user信息\n    setLoading(true); //只要开始请求数据，更改为loading状态\n\n    const res = await axios.get('/api/hosts/status', {});\n\n    if (res.status !== 200) {\n      message.info('请求错误');\n      setLoading(false);\n      return;\n    }\n\n    dispatch({\n      type: GET_MONITOR,\n      payload: {\n        monitor: res.data,\n        total: res.data.length\n      }\n    });\n    setLoading(false);\n  }; // api/graphs/?host_id=3&time_range=latest  \n  //getMonitorDetail\n\n\n  const getMonitorDetail = async id => {\n    //根据login名获取user信息\n    setLoading(true); //只要开始请求数据，更改为loading状态\n\n    const res = await axios.get('/api/graphs', {\n      host_id: id.toString(),\n      time_range: 'latest'\n    });\n\n    if (res.status !== 200) {\n      message.info('请求错误');\n      setLoading(false);\n      return;\n    }\n\n    dispatch({\n      type: GET_DETAIL,\n      payload: {\n        detail: res // total:res.data.length\n\n      }\n    });\n    setLoading(false);\n  }; //set loading\n\n\n  const setLoading = loading => {\n    dispatch({\n      type: SET_LOADING,\n      //使用dispatch提交到Reducer中\n      payload: {\n        loading\n      }\n    });\n  };\n\n  return React.createElement(MonitorContext.Provider, {\n    value: {\n      monitor: state.monitor,\n      loading: state.loading,\n      total: state.total,\n      detail: state.detail,\n      setLoading,\n      getMonitor,\n      getMonitorDetail\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default MonitorState;","map":{"version":3,"sources":["/Users/mac/Desktop/毕设/毕设/src/context/monitor/monitorState.js"],"names":["React","useReducer","MonitorContext","MonitorReducer","axios","message","GET_MONITOR","SET_LOADING","GET_DETAIL","MonitorState","props","initialState","monitor","detail","loading","total","state","dispatch","getMonitor","setLoading","res","get","status","info","type","payload","data","length","getMonitorDetail","id","host_id","toString","time_range","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport MonitorContext from './monitorContext';\nimport MonitorReducer from './monitorReducer';\nimport axios from 'axios'\nimport {message} from 'antd'\n\nimport { GET_MONITOR, SET_LOADING,GET_DETAIL } from '../type'\n\n\n\nconst MonitorState = props => {\n    //初始化状态\n    const initialState = {\n        monitor: {},\n        detail:{},\n        loading: false,\n        total:0\n\n    };\n\n    //使用useReducer，即state关联Reducer\n    const [state, dispatch] = useReducer(MonitorReducer, initialState) //函数参数1：当前提交的reduver       函数参数2：当前提交的状态值 ；\n\n    //实现方法区域                                                          \n    //getMonitor\n    const getMonitor = async () => { //根据login名获取user信息\n        setLoading(true)//只要开始请求数据，更改为loading状态\n        const res = await axios.get('/api/hosts/status',{})\n        if(res.status!==200){\n            message.info('请求错误')\n            setLoading(false)\n            return\n        }\n        dispatch({\n            type: GET_MONITOR,\n            payload: {\n                monitor: res.data,\n                total:res.data.length\n            }\n        })\n        setLoading(false)\n    };\n    // api/graphs/?host_id=3&time_range=latest  \n\n\n      //getMonitorDetail\n      const getMonitorDetail = async (id) => { //根据login名获取user信息\n        setLoading(true)//只要开始请求数据，更改为loading状态\n        const res = await axios.get('/api/graphs',{host_id:id.toString(),time_range:'latest'})\n        if(res.status!==200){\n            message.info('请求错误')\n            setLoading(false)\n            return\n        }\n        dispatch({\n            type: GET_DETAIL,\n            payload: {\n                detail: res,\n                // total:res.data.length\n            }\n        })\n        setLoading(false)\n    };\n   \n    //set loading\n    const setLoading = (loading) => {\n        dispatch({\n            type: SET_LOADING, //使用dispatch提交到Reducer中\n            payload: { loading }\n        })\n    }\n\n    return (<MonitorContext.Provider value={{\n        monitor: state.monitor,\n        loading: state.loading,\n        total:state.total,\n        detail:state.detail,\n\n        setLoading,\n        getMonitor,\n        getMonitorDetail,\n    }}>{props.children}</MonitorContext.Provider>)\n\n\n}\nexport default MonitorState\n"]},"metadata":{},"sourceType":"module"}