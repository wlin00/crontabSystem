{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/\\u6BD5\\u8BBE/\\u6BD5\\u8BBE/src/component/pages/frontend/Notice/GoodNode/GoodNode.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Input, Table, Tag, message } from 'antd'; // import CronContext from '../../../../../context/crontab/cronContext'\n\nimport axios from 'axios'; // import moment from 'moment'\n\nimport '../GoodNode/GoodNode.scss';\n\nconst GoodNode = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        goodNode = _useState2[0],\n        setGoodNode = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        total = _useState4[0],\n        setTotal = _useState4[1]; // const [logData, setLogData] = useState({})\n  // const cronContext = useContext(CronContext)\n  // const { node, getNode, } = cronContext\n\n\n  useEffect(() => {\n    //useEffect 重构生命周期didMount\n    getGoodNode(); // eslint-disable-next-line\n  }, []); //获取日志列表\n\n  const getGoodNode = () => {\n    //由于axios源码内部转换post请求参数为JSON.Stringify\n    //所以这里使用URLSearchParams键值对传参\n    // let param = new URLSearchParams()\n    // let task = node[logName].name\n    // param.append('name', task)\n    axios.get('/worker/list', {}).then(data => {\n      if (data.status === 200) {\n        if (data.data.errno !== 0) {\n          message.info('获取健康节点失败');\n          return;\n        }\n\n        if (data.data.data.length === 0) {\n          setGoodNode([]);\n        }\n\n        if (data.data.data.length > 0) {\n          setGoodNode(data.data.data);\n          setTotal(data.data.data.length);\n        }\n\n        console.log(data.data.data);\n      }\n    }).catch(err => {\n      message.info(err);\n    });\n  }; //分页\n\n\n  const _useState5 = useState(1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentPage = _useState6[0],\n        setCurrentPage = _useState6[1];\n\n  const paginationProps = {\n    showSizeChanger: false,\n    showQuickJumper: false,\n    showTotal: () => \"\\u5171\".concat(total, \"\\u6761\"),\n    pageSize: 5,\n    current: currentPage,\n    total: total,\n    onShowSizeChange: (current, pageSize) => changePageSize(pageSize, current),\n    onChange: current => changePage(current)\n  };\n\n  const changePageSize = (a, b) => {\n    console.log(a, b);\n  };\n\n  const changePage = v => {\n    console.log(v);\n    setCurrentPage(v);\n  }; // const paginationProps = {\n  //     showSizeChanger: true,\n  //     showQuickJumper: false,\n  //     showTotal: () => `共${totals}条`,\n  //     pageSize: this.state.pageSize,\n  //     current: page.pageNum,\n  //     total: page.total,\n  //     onShowSizeChange: (current, pageSize) => this.changePageSize(pageSize, current),\n  //     onChange: (current) => this.changePage(current),\n  // }\n\n\n  const columns = [{\n    title: '节点IP',\n    dataIndex: 'name',\n    key: 'name',\n    render: text => React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, text)\n  }];\n  const data = []; // 初始化antd表格\n\n  if (goodNode.length !== undefined) {\n    goodNode.forEach((item, index) => {\n      data.push({\n        key: String(index + 1),\n        name: item ? item : '暂无'\n      });\n    });\n  } // if (loading) { return (<Spinner style={{ width: '300px' }}></Spinner>) }\n\n\n  return React.createElement(\"div\", {\n    className: \"Table3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Table3-table\",\n    style: {\n      marginBottom: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    pagination: paginationProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })));\n};\n\nexport default GoodNode;","map":{"version":3,"sources":["/Users/mac/Desktop/毕设/毕设/src/component/pages/frontend/Notice/GoodNode/GoodNode.js"],"names":["React","useState","useEffect","Typography","Input","Table","Tag","message","axios","GoodNode","props","goodNode","setGoodNode","total","setTotal","getGoodNode","get","then","data","status","errno","info","length","console","log","catch","err","currentPage","setCurrentPage","paginationProps","showSizeChanger","showQuickJumper","showTotal","pageSize","current","onShowSizeChange","changePageSize","onChange","changePage","a","b","v","columns","title","dataIndex","key","render","text","undefined","forEach","item","index","push","String","name","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Typography, Input, Table, Tag, message } from 'antd'\n// import CronContext from '../../../../../context/crontab/cronContext'\nimport axios from 'axios'\n// import moment from 'moment'\n\nimport '../GoodNode/GoodNode.scss'\n\n\n\nconst GoodNode = (props) => {\n    const [goodNode,setGoodNode]=useState([])\n    const [total,setTotal]=useState(0)\n    // const [logData, setLogData] = useState({})\n    // const cronContext = useContext(CronContext)\n    // const { node, getNode, } = cronContext\n    useEffect(() => {  //useEffect 重构生命周期didMount\n        getGoodNode()\n        // eslint-disable-next-line\n    }, [])\n\n\n    //获取日志列表\n    const getGoodNode = () => {\n        //由于axios源码内部转换post请求参数为JSON.Stringify\n        //所以这里使用URLSearchParams键值对传参\n        // let param = new URLSearchParams()\n        // let task = node[logName].name\n        // param.append('name', task)\n\n        axios.get('/worker/list', {})\n            .then((data) => {\n                if (data.status === 200) {\n                    if (data.data.errno !== 0) {\n                        message.info('获取健康节点失败');\n                        return\n                    }\n                    if(data.data.data.length===0){\n                        setGoodNode([])\n                    }\n                    if (data.data.data.length > 0) {\n                        setGoodNode(data.data.data)\n                        setTotal(data.data.data.length)\n                    }\n                    console.log(data.data.data)\n\n                }\n            })\n            .catch((err) => { message.info(err) })\n    }\n\n\n    //分页\n    const [currentPage, setCurrentPage] = useState(1)\n    const paginationProps = {\n        showSizeChanger: false,\n        showQuickJumper: false,\n        showTotal: () => `共${total}条`,\n        pageSize: 5,\n        current: currentPage,\n        total: total,\n        onShowSizeChange: (current, pageSize) => changePageSize(pageSize, current),\n        onChange: (current) => changePage(current),\n    }\n\n    const changePageSize = (a, b) => {\n        console.log(a, b)\n    }\n\n    const changePage = (v) => {\n        console.log(v)\n        setCurrentPage(v)\n    }\n\n    // const paginationProps = {\n    //     showSizeChanger: true,\n    //     showQuickJumper: false,\n    //     showTotal: () => `共${totals}条`,\n    //     pageSize: this.state.pageSize,\n    //     current: page.pageNum,\n    //     total: page.total,\n    //     onShowSizeChange: (current, pageSize) => this.changePageSize(pageSize, current),\n    //     onChange: (current) => this.changePage(current),\n    // }\n\n\n\n\n\n\n    const columns = [\n        {\n            title: '节点IP',\n            dataIndex: 'name',\n            key: 'name',\n            render: text => <span>{text}</span>,\n        },\n        \n    ];\n\n    const data = []; // 初始化antd表格\n    if (goodNode.length !== undefined) {\n        goodNode.forEach((item, index) => {\n            data.push({\n                key: String(index + 1),\n\n                name: item ? item : '暂无',\n\n\n            })\n\n        })\n    }\n\n    // if (loading) { return (<Spinner style={{ width: '300px' }}></Spinner>) }\n    return (\n        <div className='Table3'>\n            <div className='Table3-table' style={{ marginBottom: '10px' }}>\n                <Table columns={columns} dataSource={data} pagination={paginationProps} />\n            </div>\n        </div>\n    )\n}\n\nexport default GoodNode\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}